<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. -->
<project basedir="." default="build" name="test.project">
	<property environment="env" />
	<property name="junit.output.dir" value="junit" />
	<property name="debuglevel" value="source,lines,vars" />
	<property name="target" value="1.7" />
	<property name="source" value="1.7" />
	<property name="out" value="out" />
	<property name="bin" value="bin-ant" />
	<property name="artifact.dir" value="../../artifacts" />
	<path id="JUnit 4.libraryclasspath">
		<fileset dir="lib">
			<include name="*.jar" />
		</fileset>
	</path>
	<path id="test.project.classpath">
		<pathelement location="bin-ant" />
		<path refid="JUnit 4.libraryclasspath" />
	</path>
	<target name="init">
		<mkdir dir="bin-ant" />
		<mkdir dir="bin-test" />
		<copy includeemptydirs="false" todir="bin-ant">
			<fileset dir="src">
				<exclude name="**/*.launch" />
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<copy includeemptydirs="false" todir="bin-test">
			<fileset dir="test">
				<exclude name="**/*.launch" />
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>
	<target name="clean">
		<delete dir="bin-ant" />
		<delete dir="bin-test" />
	</target>
	<target depends="clean" name="cleanall" />
	<target depends="build-subprojects,build-project,build-test,jar,jar-test" name="build" />
	<target name="build-subprojects" />
	<target depends="init" name="build-project">
		<echo message="${ant.project.name}: ${ant.file}" />
		<javac debug="true" debuglevel="${debuglevel}" destdir="bin-ant" includeantruntime="false" source="${source}" target="${target}">
			<src path="src" />
			<classpath refid="test.project.classpath" />
		</javac>
	</target>
	<target depends="init" name="build-test">
		<echo message="${ant.project.name}: ${ant.file}" />
		<javac debug="true" debuglevel="${debuglevel}" destdir="bin-test" includeantruntime="false" source="${source}" target="${target}">
			<src path="test" />
			<classpath refid="test.project.classpath" />
		</javac>
	</target>
	<target name="jar" depends="build-project" description="Create a module JAR file">
		<!-- unless="jar.isCurrent" -->
		<tstamp>
			<format property="timestamp" pattern="yyyyMMdd_HHmmss" />
			<format property="current.time" pattern="MM/dd/yyyy hh:mm:ss" />
		</tstamp>
		<mkdir dir="${out}" />
		<!-- <jar destfile="${out}/common.web_${build.number}.jar" basedir="${bin}"> -->
		<jar destfile="${out}/${ant.project.name}.jar" basedir="${bin}">
			<manifest>
				<section name="Copyright">
					<attribute name="Copy" value="(C) Sevogle 2011" />
				</section>
				<attribute name="Build-Date" value="${current.time}" />
				<attribute name="Build-Number" value="${build.number}" />
			</manifest>
			<fileset dir="src" includes="**/*.java" />
		</jar>

		<checksum>
			<fileset dir="${out}" includes="*.jar" />
			<fileset dir="${out}" includes="*.war" />
		</checksum>
	</target>
	<target name="jar-test" depends="build-test" description="Create a module JAR file">
		<!-- unless="jar.isCurrent" -->
		<tstamp>
			<format property="timestamp" pattern="yyyyMMdd_HHmmss" />
			<format property="current.time" pattern="MM/dd/yyyy hh:mm:ss" />
		</tstamp>
		<mkdir dir="${out}" />
		<!-- <jar destfile="${out}/common.web_${build.number}.jar" basedir="${bin}"> -->
		<jar destfile="${out}/${ant.project.name}.test.jar" basedir="bin-test">
			<manifest>
				<section name="Copyright">
					<attribute name="Copy" value="(C) Sevogle 2011" />
				</section>
				<attribute name="Build-Date" value="${current.time}" />
				<attribute name="Build-Number" value="${build.number}" />
			</manifest>
			<fileset dir="test" includes="**/*.java" />
		</jar>

		<checksum>
			<fileset dir="${out}" includes="*.jar" />
			<fileset dir="${out}" includes="*.war" />
		</checksum>
	</target>

	<target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects" />
	<target name="FoobarTest">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="test.project.FoobarTest" todir="${junit.output.dir}" />
			<classpath refid="test.project.classpath" />
		</junit>
	</target>
	<target name="junitreport">
		<junitreport todir="${junit.output.dir}">
			<fileset dir="${junit.output.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${junit.output.dir}" />
		</junitreport>
	</target>
	<path id="test.run.classpath">
		<fileset dir="${out}">
			<include name="*.jar" />
		</fileset>
		<path refid="JUnit 4.libraryclasspath" />
	</path>
	<target name="test" description="Test the Common.java project">
		<exec executable="unzip">
			<arg value="-t" />
			<arg value="out/test.project.jar" />
		</exec>
		<exec executable="unzip">
			<arg value="-t" />
			<arg value="out/test.project.test.jar" />
		</exec>
		<junit fork="true" forkmode="once">
			<classpath refid="test.run.classpath" />
			<formatter type="brief" usefile="false" />
			<batchtest>
				<zipfileset includes="**/*Test.class **/*Tests.class" excludes="**/*$$*">
					<fileset dir="${out}" id="test.publish.id">
						<include name="*.test.jar" />
					</fileset>
				</zipfileset>
			</batchtest>
		</junit>
	</target>
	<path id="test.artifacts.run.classpath">
		<fileset dir="${artifact.dir}">
			<include name="*.jar" />
		</fileset>
	</path>
	<target name="test-artifacts" description="Test the Common.java project">
		<exec executable="unzip">
			<arg value="-t" />
			<arg value="${artifact.dir}/test.project.jar" />
		</exec>
		<exec executable="unzip">
			<arg value="-t" />
			<arg value="${artifact.dir}/test.project.test.jar" />
		</exec>
		<junit fork="true" forkmode="once">
			<classpath refid="test.artifacts.run.classpath" />
			<formatter type="brief" usefile="false" />
			<batchtest>
				<zipfileset includes="**/*Test.class **/*Tests.class" excludes="**/*$$*">
					<fileset dir="${artifact.dir}" id="test.publish.id">
						<include name="*.test.jar" />
					</fileset>
				</zipfileset>
			</batchtest>
		</junit>
	</target>
</project>
